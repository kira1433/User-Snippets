<snippet>
	<content><![CDATA[

struct segtree{
    struct node{
        int seg,pref,suff,sum;
    };

    node leaf(int v){ 
        if(v > 0) return {v,v,v,v}; 
        else return {0,0,0,v};
    }

    node EXT = leaf(0);

    node merge(node val1, node val2){
        node val;
        val.seg = max({val1.seg,val2.seg,val1.suff+val2.pref});    
        val.pref = max({val1.pref,val1.sum+val2.pref});
        val.suff = max({val2.suff,val1.suff+val2.sum});
        val.sum = val1.sum+val2.sum;
        return val;
    }

    vector<node> tree;
    int n;
    void init(int _n){
        n = _n;
        tree.resize(4*n);
    }

    void build(vector<int>& a,int x,int lx,int rx){
        if(rx-lx == 1){
            if(lx<a.size()) tree[x] = leaf(a[lx]);
            return;
        }
        int m = (lx+rx)/2;
        build(a,2*x+1,lx,m);
        build(a,2*x+2,m,rx);
        tree[x] = merge(tree[2*x+1],tree[2*x+2]);
    }

    void build(vector<int>& a){
        build(a,0,0,n);
    }

    void set(int i,int v,int x,int lx,int rx){
        if(rx-lx == 1){
            tree[x] = leaf(v);
            return;
        }
        int m = (lx+rx)/2;
        if(i<m)set(i,v,2*x+1,lx,m);
        else set(i,v,2*x+2,m,rx);
        tree[x] = merge(tree[2*x+1],tree[2*x+2]);
    }

    void set(int i,int v){
        set(i,v,0,0,n);
    }

    node query(int l,int r,int x,int lx,int rx){
        if(lx >= r || l >= rx) return EXT;
        if(lx>=l && rx<=r)return tree[x];
        int m = (lx+rx)/2;
        node s1 = query(l,r,2*x+1,lx,m);
        node s2 = query(l,r,2*x+2,m,rx);
        return merge(s1,s2);
    }

    node query(int l,int r){
        return query(l,r,0,0,n);
    }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>node_segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
